<MudTextField For="@For" Label="@Label" Class="@Class"
    InputType="@PasswordInputType" Adornment="Adornment.End" AdornmentIcon="@PasswordVisibilityIcon"
    OnAdornmentClick="@TogglePasswordVisibility" AdornmentAriaLabel="Show Password"
    Value="@Value" ValueChanged="@ValueChanged"/>

@code {

    [Parameter, EditorRequired]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    [Parameter]
    public Expression<Func<string?>>? For { get; set; }

    [Parameter]
    public string? Label { get; set; } = "Password";

    [Parameter]
    public string? Class { get; set; }

    private bool PasswordIsVisible { get; set; }
    private InputType PasswordInputType { get; set; } = InputType.Password;
    private string PasswordVisibilityIcon { get; set; } = Icons.Material.Filled.Visibility;

    private void TogglePasswordVisibility()
    {
        PasswordIsVisible = !PasswordIsVisible;
        PasswordInputType = PasswordIsVisible ? InputType.Text : InputType.Password;
        PasswordVisibilityIcon = PasswordIsVisible ? Icons.Material.Filled.VisibilityOff : Icons.Material.Filled.Visibility;
    }

    private async Task OnValueChanged(string? value)
    {
        StateHasChanged();
        await this.ValueChanged.InvokeAsync(value);
    }
}